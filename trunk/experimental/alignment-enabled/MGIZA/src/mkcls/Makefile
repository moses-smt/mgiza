# Makefile.in generated by automake 1.10.2 from Makefile.am.
# src/mkcls/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/mgiza
pkglibdir = $(libdir)/mgiza
pkgincludedir = $(includedir)/mgiza
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = mkcls$(EXEEXT)
subdir = src/mkcls
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_mkcls_OBJECTS = mkcls-GDAOptimization.$(OBJEXT) \
	mkcls-general.$(OBJEXT) mkcls-HCOptimization.$(OBJEXT) \
	mkcls-IterOptimization.$(OBJEXT) mkcls-KategProblem.$(OBJEXT) \
	mkcls-KategProblemKBC.$(OBJEXT) \
	mkcls-KategProblemTest.$(OBJEXT) \
	mkcls-KategProblemWBC.$(OBJEXT) mkcls-mkcls.$(OBJEXT) \
	mkcls-MYOptimization.$(OBJEXT) mkcls-Optimization.$(OBJEXT) \
	mkcls-Problem.$(OBJEXT) mkcls-ProblemTest.$(OBJEXT) \
	mkcls-RRTOptimization.$(OBJEXT) mkcls-SAOptimization.$(OBJEXT) \
	mkcls-StatVar.$(OBJEXT) mkcls-TAOptimization.$(OBJEXT)
mkcls_OBJECTS = $(am_mkcls_OBJECTS)
mkcls_LDADD = $(LDADD)
mkcls_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(mkcls_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(mkcls_SOURCES)
DIST_SOURCES = $(mkcls_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run autoconf
AUTOHEADER = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run autoheader
AUTOMAKE = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run automake-1.10
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = 
MAKEINFO = ${SHELL} /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = mgiza
PACKAGE_BUGREPORT = 
PACKAGE_NAME = mgiza
PACKAGE_STRING = mgiza 1.0
PACKAGE_TARNAME = mgiza
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
VERSION = 1.0
abs_builddir = /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/src/mkcls
abs_srcdir = /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/src/mkcls
abs_top_builddir = /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA
abs_top_srcdir = /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/qing/mgizapp/trunk/experimental/alignment-enabled/MGIZA/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
mkcls_SOURCES = \
	Array.h\
	FixedArray.h \
	FlexArray.h \
	GDAOptimization.cpp \
	GDAOptimization.h \
	general.cpp \
	general.h \
	HCOptimization.cpp \
	HCOptimization.h \
	IterOptimization.cpp \
	IterOptimization.h \
	KategProblem.cpp \
	KategProblem.h \
	KategProblemKBC.cpp \
	KategProblemKBC.h \
	KategProblemTest.cpp \
	KategProblemTest.h \
	KategProblemWBC.cpp \
	KategProblemWBC.h \
	Makefile.am \
	Makefile.am.bak \
	mkcls.cpp \
	my.h \
	myassert.h \
	myleda.h \
	MYOptimization.cpp \
	MYOptimization.h \
	mystl.h \
	Optimization.cpp \
	Optimization.h \
	Problem.cpp \
	Problem.h \
	ProblemTest.cpp \
	ProblemTest.h \
	RRTOptimization.cpp \
	RRTOptimization.h \
	SAOptimization.cpp \
	SAOptimization.h \
	StatVar.cpp \
	StatVar.h \
	TAOptimization.cpp \
	TAOptimization.h

mkcls_CXXFLAGS = \
	-DNDEBUG

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/mkcls/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/mkcls/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
mkcls$(EXEEXT): $(mkcls_OBJECTS) $(mkcls_DEPENDENCIES) 
	@rm -f mkcls$(EXEEXT)
	$(mkcls_LINK) $(mkcls_OBJECTS) $(mkcls_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/mkcls-GDAOptimization.Po
include ./$(DEPDIR)/mkcls-HCOptimization.Po
include ./$(DEPDIR)/mkcls-IterOptimization.Po
include ./$(DEPDIR)/mkcls-KategProblem.Po
include ./$(DEPDIR)/mkcls-KategProblemKBC.Po
include ./$(DEPDIR)/mkcls-KategProblemTest.Po
include ./$(DEPDIR)/mkcls-KategProblemWBC.Po
include ./$(DEPDIR)/mkcls-MYOptimization.Po
include ./$(DEPDIR)/mkcls-Optimization.Po
include ./$(DEPDIR)/mkcls-Problem.Po
include ./$(DEPDIR)/mkcls-ProblemTest.Po
include ./$(DEPDIR)/mkcls-RRTOptimization.Po
include ./$(DEPDIR)/mkcls-SAOptimization.Po
include ./$(DEPDIR)/mkcls-StatVar.Po
include ./$(DEPDIR)/mkcls-TAOptimization.Po
include ./$(DEPDIR)/mkcls-general.Po
include ./$(DEPDIR)/mkcls-mkcls.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mkcls-GDAOptimization.o: GDAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-GDAOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-GDAOptimization.Tpo -c -o mkcls-GDAOptimization.o `test -f 'GDAOptimization.cpp' || echo '$(srcdir)/'`GDAOptimization.cpp
	mv -f $(DEPDIR)/mkcls-GDAOptimization.Tpo $(DEPDIR)/mkcls-GDAOptimization.Po
#	source='GDAOptimization.cpp' object='mkcls-GDAOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-GDAOptimization.o `test -f 'GDAOptimization.cpp' || echo '$(srcdir)/'`GDAOptimization.cpp

mkcls-GDAOptimization.obj: GDAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-GDAOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-GDAOptimization.Tpo -c -o mkcls-GDAOptimization.obj `if test -f 'GDAOptimization.cpp'; then $(CYGPATH_W) 'GDAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/GDAOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-GDAOptimization.Tpo $(DEPDIR)/mkcls-GDAOptimization.Po
#	source='GDAOptimization.cpp' object='mkcls-GDAOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-GDAOptimization.obj `if test -f 'GDAOptimization.cpp'; then $(CYGPATH_W) 'GDAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/GDAOptimization.cpp'; fi`

mkcls-general.o: general.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-general.o -MD -MP -MF $(DEPDIR)/mkcls-general.Tpo -c -o mkcls-general.o `test -f 'general.cpp' || echo '$(srcdir)/'`general.cpp
	mv -f $(DEPDIR)/mkcls-general.Tpo $(DEPDIR)/mkcls-general.Po
#	source='general.cpp' object='mkcls-general.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-general.o `test -f 'general.cpp' || echo '$(srcdir)/'`general.cpp

mkcls-general.obj: general.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-general.obj -MD -MP -MF $(DEPDIR)/mkcls-general.Tpo -c -o mkcls-general.obj `if test -f 'general.cpp'; then $(CYGPATH_W) 'general.cpp'; else $(CYGPATH_W) '$(srcdir)/general.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-general.Tpo $(DEPDIR)/mkcls-general.Po
#	source='general.cpp' object='mkcls-general.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-general.obj `if test -f 'general.cpp'; then $(CYGPATH_W) 'general.cpp'; else $(CYGPATH_W) '$(srcdir)/general.cpp'; fi`

mkcls-HCOptimization.o: HCOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-HCOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-HCOptimization.Tpo -c -o mkcls-HCOptimization.o `test -f 'HCOptimization.cpp' || echo '$(srcdir)/'`HCOptimization.cpp
	mv -f $(DEPDIR)/mkcls-HCOptimization.Tpo $(DEPDIR)/mkcls-HCOptimization.Po
#	source='HCOptimization.cpp' object='mkcls-HCOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-HCOptimization.o `test -f 'HCOptimization.cpp' || echo '$(srcdir)/'`HCOptimization.cpp

mkcls-HCOptimization.obj: HCOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-HCOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-HCOptimization.Tpo -c -o mkcls-HCOptimization.obj `if test -f 'HCOptimization.cpp'; then $(CYGPATH_W) 'HCOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/HCOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-HCOptimization.Tpo $(DEPDIR)/mkcls-HCOptimization.Po
#	source='HCOptimization.cpp' object='mkcls-HCOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-HCOptimization.obj `if test -f 'HCOptimization.cpp'; then $(CYGPATH_W) 'HCOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/HCOptimization.cpp'; fi`

mkcls-IterOptimization.o: IterOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-IterOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-IterOptimization.Tpo -c -o mkcls-IterOptimization.o `test -f 'IterOptimization.cpp' || echo '$(srcdir)/'`IterOptimization.cpp
	mv -f $(DEPDIR)/mkcls-IterOptimization.Tpo $(DEPDIR)/mkcls-IterOptimization.Po
#	source='IterOptimization.cpp' object='mkcls-IterOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-IterOptimization.o `test -f 'IterOptimization.cpp' || echo '$(srcdir)/'`IterOptimization.cpp

mkcls-IterOptimization.obj: IterOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-IterOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-IterOptimization.Tpo -c -o mkcls-IterOptimization.obj `if test -f 'IterOptimization.cpp'; then $(CYGPATH_W) 'IterOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/IterOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-IterOptimization.Tpo $(DEPDIR)/mkcls-IterOptimization.Po
#	source='IterOptimization.cpp' object='mkcls-IterOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-IterOptimization.obj `if test -f 'IterOptimization.cpp'; then $(CYGPATH_W) 'IterOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/IterOptimization.cpp'; fi`

mkcls-KategProblem.o: KategProblem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblem.o -MD -MP -MF $(DEPDIR)/mkcls-KategProblem.Tpo -c -o mkcls-KategProblem.o `test -f 'KategProblem.cpp' || echo '$(srcdir)/'`KategProblem.cpp
	mv -f $(DEPDIR)/mkcls-KategProblem.Tpo $(DEPDIR)/mkcls-KategProblem.Po
#	source='KategProblem.cpp' object='mkcls-KategProblem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblem.o `test -f 'KategProblem.cpp' || echo '$(srcdir)/'`KategProblem.cpp

mkcls-KategProblem.obj: KategProblem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblem.obj -MD -MP -MF $(DEPDIR)/mkcls-KategProblem.Tpo -c -o mkcls-KategProblem.obj `if test -f 'KategProblem.cpp'; then $(CYGPATH_W) 'KategProblem.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblem.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-KategProblem.Tpo $(DEPDIR)/mkcls-KategProblem.Po
#	source='KategProblem.cpp' object='mkcls-KategProblem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblem.obj `if test -f 'KategProblem.cpp'; then $(CYGPATH_W) 'KategProblem.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblem.cpp'; fi`

mkcls-KategProblemKBC.o: KategProblemKBC.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemKBC.o -MD -MP -MF $(DEPDIR)/mkcls-KategProblemKBC.Tpo -c -o mkcls-KategProblemKBC.o `test -f 'KategProblemKBC.cpp' || echo '$(srcdir)/'`KategProblemKBC.cpp
	mv -f $(DEPDIR)/mkcls-KategProblemKBC.Tpo $(DEPDIR)/mkcls-KategProblemKBC.Po
#	source='KategProblemKBC.cpp' object='mkcls-KategProblemKBC.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemKBC.o `test -f 'KategProblemKBC.cpp' || echo '$(srcdir)/'`KategProblemKBC.cpp

mkcls-KategProblemKBC.obj: KategProblemKBC.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemKBC.obj -MD -MP -MF $(DEPDIR)/mkcls-KategProblemKBC.Tpo -c -o mkcls-KategProblemKBC.obj `if test -f 'KategProblemKBC.cpp'; then $(CYGPATH_W) 'KategProblemKBC.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemKBC.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-KategProblemKBC.Tpo $(DEPDIR)/mkcls-KategProblemKBC.Po
#	source='KategProblemKBC.cpp' object='mkcls-KategProblemKBC.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemKBC.obj `if test -f 'KategProblemKBC.cpp'; then $(CYGPATH_W) 'KategProblemKBC.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemKBC.cpp'; fi`

mkcls-KategProblemTest.o: KategProblemTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemTest.o -MD -MP -MF $(DEPDIR)/mkcls-KategProblemTest.Tpo -c -o mkcls-KategProblemTest.o `test -f 'KategProblemTest.cpp' || echo '$(srcdir)/'`KategProblemTest.cpp
	mv -f $(DEPDIR)/mkcls-KategProblemTest.Tpo $(DEPDIR)/mkcls-KategProblemTest.Po
#	source='KategProblemTest.cpp' object='mkcls-KategProblemTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemTest.o `test -f 'KategProblemTest.cpp' || echo '$(srcdir)/'`KategProblemTest.cpp

mkcls-KategProblemTest.obj: KategProblemTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemTest.obj -MD -MP -MF $(DEPDIR)/mkcls-KategProblemTest.Tpo -c -o mkcls-KategProblemTest.obj `if test -f 'KategProblemTest.cpp'; then $(CYGPATH_W) 'KategProblemTest.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemTest.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-KategProblemTest.Tpo $(DEPDIR)/mkcls-KategProblemTest.Po
#	source='KategProblemTest.cpp' object='mkcls-KategProblemTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemTest.obj `if test -f 'KategProblemTest.cpp'; then $(CYGPATH_W) 'KategProblemTest.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemTest.cpp'; fi`

mkcls-KategProblemWBC.o: KategProblemWBC.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemWBC.o -MD -MP -MF $(DEPDIR)/mkcls-KategProblemWBC.Tpo -c -o mkcls-KategProblemWBC.o `test -f 'KategProblemWBC.cpp' || echo '$(srcdir)/'`KategProblemWBC.cpp
	mv -f $(DEPDIR)/mkcls-KategProblemWBC.Tpo $(DEPDIR)/mkcls-KategProblemWBC.Po
#	source='KategProblemWBC.cpp' object='mkcls-KategProblemWBC.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemWBC.o `test -f 'KategProblemWBC.cpp' || echo '$(srcdir)/'`KategProblemWBC.cpp

mkcls-KategProblemWBC.obj: KategProblemWBC.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-KategProblemWBC.obj -MD -MP -MF $(DEPDIR)/mkcls-KategProblemWBC.Tpo -c -o mkcls-KategProblemWBC.obj `if test -f 'KategProblemWBC.cpp'; then $(CYGPATH_W) 'KategProblemWBC.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemWBC.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-KategProblemWBC.Tpo $(DEPDIR)/mkcls-KategProblemWBC.Po
#	source='KategProblemWBC.cpp' object='mkcls-KategProblemWBC.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-KategProblemWBC.obj `if test -f 'KategProblemWBC.cpp'; then $(CYGPATH_W) 'KategProblemWBC.cpp'; else $(CYGPATH_W) '$(srcdir)/KategProblemWBC.cpp'; fi`

mkcls-mkcls.o: mkcls.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-mkcls.o -MD -MP -MF $(DEPDIR)/mkcls-mkcls.Tpo -c -o mkcls-mkcls.o `test -f 'mkcls.cpp' || echo '$(srcdir)/'`mkcls.cpp
	mv -f $(DEPDIR)/mkcls-mkcls.Tpo $(DEPDIR)/mkcls-mkcls.Po
#	source='mkcls.cpp' object='mkcls-mkcls.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-mkcls.o `test -f 'mkcls.cpp' || echo '$(srcdir)/'`mkcls.cpp

mkcls-mkcls.obj: mkcls.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-mkcls.obj -MD -MP -MF $(DEPDIR)/mkcls-mkcls.Tpo -c -o mkcls-mkcls.obj `if test -f 'mkcls.cpp'; then $(CYGPATH_W) 'mkcls.cpp'; else $(CYGPATH_W) '$(srcdir)/mkcls.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-mkcls.Tpo $(DEPDIR)/mkcls-mkcls.Po
#	source='mkcls.cpp' object='mkcls-mkcls.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-mkcls.obj `if test -f 'mkcls.cpp'; then $(CYGPATH_W) 'mkcls.cpp'; else $(CYGPATH_W) '$(srcdir)/mkcls.cpp'; fi`

mkcls-MYOptimization.o: MYOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-MYOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-MYOptimization.Tpo -c -o mkcls-MYOptimization.o `test -f 'MYOptimization.cpp' || echo '$(srcdir)/'`MYOptimization.cpp
	mv -f $(DEPDIR)/mkcls-MYOptimization.Tpo $(DEPDIR)/mkcls-MYOptimization.Po
#	source='MYOptimization.cpp' object='mkcls-MYOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-MYOptimization.o `test -f 'MYOptimization.cpp' || echo '$(srcdir)/'`MYOptimization.cpp

mkcls-MYOptimization.obj: MYOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-MYOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-MYOptimization.Tpo -c -o mkcls-MYOptimization.obj `if test -f 'MYOptimization.cpp'; then $(CYGPATH_W) 'MYOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/MYOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-MYOptimization.Tpo $(DEPDIR)/mkcls-MYOptimization.Po
#	source='MYOptimization.cpp' object='mkcls-MYOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-MYOptimization.obj `if test -f 'MYOptimization.cpp'; then $(CYGPATH_W) 'MYOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/MYOptimization.cpp'; fi`

mkcls-Optimization.o: Optimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-Optimization.o -MD -MP -MF $(DEPDIR)/mkcls-Optimization.Tpo -c -o mkcls-Optimization.o `test -f 'Optimization.cpp' || echo '$(srcdir)/'`Optimization.cpp
	mv -f $(DEPDIR)/mkcls-Optimization.Tpo $(DEPDIR)/mkcls-Optimization.Po
#	source='Optimization.cpp' object='mkcls-Optimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-Optimization.o `test -f 'Optimization.cpp' || echo '$(srcdir)/'`Optimization.cpp

mkcls-Optimization.obj: Optimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-Optimization.obj -MD -MP -MF $(DEPDIR)/mkcls-Optimization.Tpo -c -o mkcls-Optimization.obj `if test -f 'Optimization.cpp'; then $(CYGPATH_W) 'Optimization.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-Optimization.Tpo $(DEPDIR)/mkcls-Optimization.Po
#	source='Optimization.cpp' object='mkcls-Optimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-Optimization.obj `if test -f 'Optimization.cpp'; then $(CYGPATH_W) 'Optimization.cpp'; else $(CYGPATH_W) '$(srcdir)/Optimization.cpp'; fi`

mkcls-Problem.o: Problem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-Problem.o -MD -MP -MF $(DEPDIR)/mkcls-Problem.Tpo -c -o mkcls-Problem.o `test -f 'Problem.cpp' || echo '$(srcdir)/'`Problem.cpp
	mv -f $(DEPDIR)/mkcls-Problem.Tpo $(DEPDIR)/mkcls-Problem.Po
#	source='Problem.cpp' object='mkcls-Problem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-Problem.o `test -f 'Problem.cpp' || echo '$(srcdir)/'`Problem.cpp

mkcls-Problem.obj: Problem.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-Problem.obj -MD -MP -MF $(DEPDIR)/mkcls-Problem.Tpo -c -o mkcls-Problem.obj `if test -f 'Problem.cpp'; then $(CYGPATH_W) 'Problem.cpp'; else $(CYGPATH_W) '$(srcdir)/Problem.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-Problem.Tpo $(DEPDIR)/mkcls-Problem.Po
#	source='Problem.cpp' object='mkcls-Problem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-Problem.obj `if test -f 'Problem.cpp'; then $(CYGPATH_W) 'Problem.cpp'; else $(CYGPATH_W) '$(srcdir)/Problem.cpp'; fi`

mkcls-ProblemTest.o: ProblemTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-ProblemTest.o -MD -MP -MF $(DEPDIR)/mkcls-ProblemTest.Tpo -c -o mkcls-ProblemTest.o `test -f 'ProblemTest.cpp' || echo '$(srcdir)/'`ProblemTest.cpp
	mv -f $(DEPDIR)/mkcls-ProblemTest.Tpo $(DEPDIR)/mkcls-ProblemTest.Po
#	source='ProblemTest.cpp' object='mkcls-ProblemTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-ProblemTest.o `test -f 'ProblemTest.cpp' || echo '$(srcdir)/'`ProblemTest.cpp

mkcls-ProblemTest.obj: ProblemTest.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-ProblemTest.obj -MD -MP -MF $(DEPDIR)/mkcls-ProblemTest.Tpo -c -o mkcls-ProblemTest.obj `if test -f 'ProblemTest.cpp'; then $(CYGPATH_W) 'ProblemTest.cpp'; else $(CYGPATH_W) '$(srcdir)/ProblemTest.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-ProblemTest.Tpo $(DEPDIR)/mkcls-ProblemTest.Po
#	source='ProblemTest.cpp' object='mkcls-ProblemTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-ProblemTest.obj `if test -f 'ProblemTest.cpp'; then $(CYGPATH_W) 'ProblemTest.cpp'; else $(CYGPATH_W) '$(srcdir)/ProblemTest.cpp'; fi`

mkcls-RRTOptimization.o: RRTOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-RRTOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-RRTOptimization.Tpo -c -o mkcls-RRTOptimization.o `test -f 'RRTOptimization.cpp' || echo '$(srcdir)/'`RRTOptimization.cpp
	mv -f $(DEPDIR)/mkcls-RRTOptimization.Tpo $(DEPDIR)/mkcls-RRTOptimization.Po
#	source='RRTOptimization.cpp' object='mkcls-RRTOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-RRTOptimization.o `test -f 'RRTOptimization.cpp' || echo '$(srcdir)/'`RRTOptimization.cpp

mkcls-RRTOptimization.obj: RRTOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-RRTOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-RRTOptimization.Tpo -c -o mkcls-RRTOptimization.obj `if test -f 'RRTOptimization.cpp'; then $(CYGPATH_W) 'RRTOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/RRTOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-RRTOptimization.Tpo $(DEPDIR)/mkcls-RRTOptimization.Po
#	source='RRTOptimization.cpp' object='mkcls-RRTOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-RRTOptimization.obj `if test -f 'RRTOptimization.cpp'; then $(CYGPATH_W) 'RRTOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/RRTOptimization.cpp'; fi`

mkcls-SAOptimization.o: SAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-SAOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-SAOptimization.Tpo -c -o mkcls-SAOptimization.o `test -f 'SAOptimization.cpp' || echo '$(srcdir)/'`SAOptimization.cpp
	mv -f $(DEPDIR)/mkcls-SAOptimization.Tpo $(DEPDIR)/mkcls-SAOptimization.Po
#	source='SAOptimization.cpp' object='mkcls-SAOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-SAOptimization.o `test -f 'SAOptimization.cpp' || echo '$(srcdir)/'`SAOptimization.cpp

mkcls-SAOptimization.obj: SAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-SAOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-SAOptimization.Tpo -c -o mkcls-SAOptimization.obj `if test -f 'SAOptimization.cpp'; then $(CYGPATH_W) 'SAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/SAOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-SAOptimization.Tpo $(DEPDIR)/mkcls-SAOptimization.Po
#	source='SAOptimization.cpp' object='mkcls-SAOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-SAOptimization.obj `if test -f 'SAOptimization.cpp'; then $(CYGPATH_W) 'SAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/SAOptimization.cpp'; fi`

mkcls-StatVar.o: StatVar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-StatVar.o -MD -MP -MF $(DEPDIR)/mkcls-StatVar.Tpo -c -o mkcls-StatVar.o `test -f 'StatVar.cpp' || echo '$(srcdir)/'`StatVar.cpp
	mv -f $(DEPDIR)/mkcls-StatVar.Tpo $(DEPDIR)/mkcls-StatVar.Po
#	source='StatVar.cpp' object='mkcls-StatVar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-StatVar.o `test -f 'StatVar.cpp' || echo '$(srcdir)/'`StatVar.cpp

mkcls-StatVar.obj: StatVar.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-StatVar.obj -MD -MP -MF $(DEPDIR)/mkcls-StatVar.Tpo -c -o mkcls-StatVar.obj `if test -f 'StatVar.cpp'; then $(CYGPATH_W) 'StatVar.cpp'; else $(CYGPATH_W) '$(srcdir)/StatVar.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-StatVar.Tpo $(DEPDIR)/mkcls-StatVar.Po
#	source='StatVar.cpp' object='mkcls-StatVar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-StatVar.obj `if test -f 'StatVar.cpp'; then $(CYGPATH_W) 'StatVar.cpp'; else $(CYGPATH_W) '$(srcdir)/StatVar.cpp'; fi`

mkcls-TAOptimization.o: TAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-TAOptimization.o -MD -MP -MF $(DEPDIR)/mkcls-TAOptimization.Tpo -c -o mkcls-TAOptimization.o `test -f 'TAOptimization.cpp' || echo '$(srcdir)/'`TAOptimization.cpp
	mv -f $(DEPDIR)/mkcls-TAOptimization.Tpo $(DEPDIR)/mkcls-TAOptimization.Po
#	source='TAOptimization.cpp' object='mkcls-TAOptimization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-TAOptimization.o `test -f 'TAOptimization.cpp' || echo '$(srcdir)/'`TAOptimization.cpp

mkcls-TAOptimization.obj: TAOptimization.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -MT mkcls-TAOptimization.obj -MD -MP -MF $(DEPDIR)/mkcls-TAOptimization.Tpo -c -o mkcls-TAOptimization.obj `if test -f 'TAOptimization.cpp'; then $(CYGPATH_W) 'TAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/TAOptimization.cpp'; fi`
	mv -f $(DEPDIR)/mkcls-TAOptimization.Tpo $(DEPDIR)/mkcls-TAOptimization.Po
#	source='TAOptimization.cpp' object='mkcls-TAOptimization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(mkcls_CXXFLAGS) $(CXXFLAGS) -c -o mkcls-TAOptimization.obj `if test -f 'TAOptimization.cpp'; then $(CYGPATH_W) 'TAOptimization.cpp'; else $(CYGPATH_W) '$(srcdir)/TAOptimization.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
